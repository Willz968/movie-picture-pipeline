name: Backend Continuous Deployment

# Ensure the workflow runs on every pull request against the main branch
on:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Install Python
      - run: sudo apt update && sudo apt install python3

      # Install Pipenv
      - run: cd starter/backend && pip install pipenv

      # Install the dependencies.
      - run: cd starter/backend && pipenv install --dev

      # Run the linter.
      - run: cd starter/backend && pipenv run lint
  
  test:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Install Python
      - run: sudo apt update && sudo apt install python3

      # Install Pipenv
      - run: cd starter/backend && pip install pipenv

      # Install the dependencies.
      - run: cd starter/backend && pipenv install --dev

      # Run the tests.
      - run: cd starter/backend && pipenv run test


  build:

    needs: [ lint, test ]

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Install Python
      - run: sudo apt update && sudo apt install python3

      # Install Pipenv
      - run: cd starter/backend && pip install pipenv

      # Install the dependencies.
      - run: cd starter/backend && pipenv install --dev
  
        # Configures AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }} 
      
      # Logs into Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build and push docker image to Amazon ECR
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend && docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest

      # Update kubeconfig
      - run: aws eks update-kubeconfig --region $AWS_REGION --name cluster

      # Deploy application to EKS cluster
      - name: Deploy application to EKS cluster
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend/k8s
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
