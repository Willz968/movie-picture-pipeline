name: Frontend Continuous Deployment

# Ensure the workflow runs on every pull request against the main branch
on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

env:
  REACT_APP_MOVIE_API_URL: http://localhost:5000
  AWS_REGION: us-east-1

jobs:
  lint:

    runs-on: ubuntu-latest

    #Use a matrix strategy to determine Node.js versions to use
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Perform a cache action to restore cache before dependency install
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: cd starter/frontend && npm list

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the linter.
      - run: cd starter/frontend && npm run lint
  
  test:

    runs-on: ubuntu-latest

    #Use a matrix strategy to determine Node.js versions to use
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Perform a cache action to restore cache before dependency install
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: cd starter/frontend && npm list

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the tests.
      - run: cd starter/frontend && npm test

  build:

    needs: [ lint, test ]

    #Use a matrix strategy to determine Node.js versions to use
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # Perform a cache action to restore cache before dependency install
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: cd starter/frontend && npm list

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the tests.
      - run: cd starter/frontend && npm test

      # Configures AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }} 
      
      # Logs into Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Build and push docker image to Amazon ECR
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo ${{ steps.login-ecr.outputs.registry }}
          cd starter/frontend && docker build --build-arg=$REACT_APP_MOVIE_API_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          echo $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Update kubeconfig
      - run: aws eks update-kubeconfig

      # Deploy application to EKS cluster
      - run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=$REGISTRY$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
