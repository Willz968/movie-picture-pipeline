name: Frontend Continuous Integration

# Ensure the workflow runs on every pull request against the main branch
on:
  pull_request:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

env:
  REACT_APP_MOVIE_API_URL: http://localhost:5000

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the node version specified in .nvmrc.
      - run: cd starter/frontend && nvm use

      # Perform a cache action to restore cache before dependency install
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: cd starter/frontend && npm list

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the linter.
      - run: cd starter/frontend && npm run lint
  
  test:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the node version specified in .nvmrc.
      - run: cd starter/frontend && nvm use

      # Perform a cache action to restore cache before dependency install
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: cd starter/frontend && npm list

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the tests.
      - run: cd starter/frontend && npm test

  build:

    needs: [ lint, test ]

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the node version specified in .nvmrc.
      - run: cd starter/frontend && nvm use

      # Perform a cache action to restore cache before dependency install
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: cd starter/frontend && npm list

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the tests.
      - run: cd starter/frontend && npm test

      # Build the application image using Docker.
      - run: cd starter/frontend && docker build --build-arg=$REACT_APP_MOVIE_API_URL --tag=mp-frontend:latest .